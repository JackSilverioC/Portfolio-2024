---
import Footer from "../components/Footer.astro";

const images = [
  {
    src: "/projects/microservices-app/APP-MICRO.drawio.png",
    title: "Diagrama de los Microservicios",
    description:
      "Este diagrama describe cómo los microservicios interactúan entre sí dentro del sistema:",
    class:
      "max-w-[100%] h-auto shadow-md",
    ul: [
      "Servidor de Configuración: para centralizar y gestionar las configuraciones de los microservicios.",
      "Servidor de Descubrimiento (Eureka): para registrar y descubrir los microservicios de manera dinámica.",
      "Comunicación Asíncrona con Kafka: para enviar mensajes entre microservicios de forma eficiente y desacoplada.",
      "Infraestructura y Herramientas con Docker y Docker Compose: para crear contenedores y orquestar los servicios en un entorno local o de producción.",
      "La persistencia de los datos se realiza en MongoDB reactivo.",
      "WebFlux y WebClient: se utilizan para gestionar la comunicación sin bloqueo entre microservicios, maximizando la eficiencia en aplicaciones reactivas."
    ]
  }
  // Agrega más imágenes y descripciones según sea necesario
];

const videos = [
  {
    url: "https://drive.google.com/file/d/1NIhirrLBq0UmvBTvtNrY-t47SjsnsLsX/view?usp=sharing",
    title: "Preparación del entorno - Parte 1",
    thumbnail: "/projects/miniaturas/mini_1.png",
    description: "Se levanta el archivo de docker-compose para crear los contenedores de las imágenes a utilizar. Se comprueba los registros en Eureka Server."
  },
  {
    url: "https://drive.google.com/file/d/1pK-O2_gmx5SW62HMBLM4qsAoIiRrT1Ec/view?usp=sharing",
    title: "Microservicio Cliente - Parte 2",
    thumbnail: "/projects/miniaturas/mini_2.png",
    description: "Uso de Spring WebFlux y reactive MongoDB para la creación del microservicio."
  },
  {
    url: "https://drive.google.com/file/d/1pCnfl6QUzrX7GXKpEWWJUihO8HJxIY1v/view?usp=sharing",
    title: "Microservicio Tarjeta de Débito - Parte 3",
    thumbnail: "/projects/miniaturas/mini_3.png",
    description: "Uso de Spring WebFlux y comunicación con el microservicio Cliente usando WebClient, y reactive MongoDB para la creación del microservicio."
  },
  {
    url: "https://drive.google.com/file/d/1MD9n8aPz2mFlg3b2xCM7vpegjaQOYTkY/view?usp=sharing",
    title: "Microservicio Transacción - Parte 4",
    thumbnail: "/projects/miniaturas/mini_4.png",
    description: 'Uso de Spring WebFlux, y reactive MongoDB para la creación del microservicio. Asimismo se usó Kafka para actualizar las cuentas de los clientes de forma asíncrona al momento de hacer una transacción.'
  }
];
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Documentación de Arquitectura</title>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <style>
      /* Estilos para el botón de volver atrás */
      .back-button {
        position: fixed;
        top: 1rem;
        left: 1rem;
        background-color: #1e3a8a;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: bold;
        text-decoration: none;
        transition: background-color 0.3s ease;
      }
      .back-button:hover {
        background-color: #3b82f6; /* Color azul más claro al pasar el cursor */
      }
    </style>
  </head>
  <body class="bg-neutral-950">
    <a href="/" class="back-button">Volver Atrás</a>
    <div
      class="absolute top-0 z-[-2] h-screen w-full bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"
    >
    </div>
    <main class="max-w-7xl mx-auto p-8">
      <!-- Título Principal -->
<section class="text-center mb-12">
  <h1
    class="text-5xl sm:text-6xl md:text-7xl font-extrabold text-white from-gray-300 via-gray-500 to-gray-800 drop-shadow-lg mb-10"
  >
    Documentación de la <br /> Arquitectura de la Aplicación
  </h1>
  <p class="mt-4 text-xl text-gray-500">
    Este proyecto implementa una arquitectura de microservicios utilizando
    Spring Boot y otras tecnologías para garantizar una solución escalable,
    segura y distribuida. Aplicando la programación reactiva usando Spring Webflux, principios SOLID y patrones de diseño como Event-Driven,
    Strategy, Singleton e inyección de dependencias, se diseñó altamente desacoplado y escalable,
    optimizando la flexibilidad, mantenibilidad y eficiencia del sistema.
  </p>

  <!-- Enlace al Proyecto -->
<div class="mt-8">
  <a
    href="https://github.com/JackSilverioC/microservices-app-transaction"
    target="_blank"
    class="inline-block border-2 border-blue-600 text-blue-600 font-bold py-3 px-6 rounded-full text-lg hover:bg-blue-600 hover:text-white transition-all duration-300 ease-in-out"
  >
    Ver Repositorio: https://github.com/JackSilverioC/microservices-app-transaction
  </a>
</div>

</section>


      <!-- Imágenes y Descripciones -->
{
  images.map((image, index) => (
    <section
      class={`mb-16 ${index % 2 === 0 ? "bg-gray-700/25" : "bg-gray-800/45"} p-8 rounded-lg shadow-lg`}
    >
      <h2 class="text-3xl font-semibold text-white mb-4">
        {image.title}
      </h2>
      <p class="text-lg text-gray-300 mb-6">{image.description}</p>
       {/* Verifica si ul existe y renderiza la lista */}
      {image.ul && (
        <ul class="list-disc pl-6 mt-4 text-gray-300 mb-10">
          {(image.ul).map((key) => (
            <li>{key}</li>
          ))}
        </ul>
      )}
      <div class="flex justify-center">
        <img src={image.src} alt={image.title} class={image.class} />
      </div>

     
    </section>
  ))
}

     <!-- Videos de Demostración -->
      <section class="mt-16">
        <h2 class="text-4xl font-bold text-blue-400 mb-8 text-center">
          Videos de Demostración
        </h2>
        <div class="flex flex-col items-center space-y-12">
          {
            videos.map((video, index) => (
              <div class="flex flex-col items-center w-full max-w-4xl px-4">
                <a href={video.url} target="_blank" class="w-full">
                  <img
                    src={video.thumbnail}
                    alt={video.title}
                    class="w-full h-auto rounded-lg shadow-md object-cover hover:scale-105"
                  />
                </a>
                <h3 class="text-2xl font-semibold text-gray-200 mt-4 mb-2 text-center">
                  {video.title}
                </h3>
                <p class="text-lg text-gray-400 mb-4 text-center">
                  {video.description}
                </p>
                <a
                  href={video.url}
                  target="_blank"
                  class="text-lg font-semibold text-white bg-blue-500 hover:bg-blue-600 focus:bg-blue-700 px-6 py-2 rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300"
                >
                  Ver Video
                </a>

              </div>
            ))
          }
        </div>
      </section>

    </main>
    <Footer/>
  </body>
</html>
